import { Telegraf, Scenes, session } from 'telegraf';
import * as dotenv from 'dotenv';
import { BotContext, BotState, DatabaseBotState } from './types';
import { TimerService } from './services/timer';
import { MainHandler } from './handlers/main';
import { DatabaseService } from './services/database';
import { mainScene, setGlobalServices, setGlobalDatabaseForMain } from './scenes/main';
import { setGlobalServicesForInterval } from './scenes/interval-settings';
import { todayHistoryScene, setGlobalDatabaseForTodayHistory } from './scenes/today-history';
import { feedingSuccessScene } from './scenes/feeding-success';
import { settingsScene } from './scenes/settings';
import { historyScene } from './scenes/history';
import { intervalSettingsScene } from './scenes/interval-settings';
import { foodSettingsScene, setGlobalDatabaseForFoodSettings } from './scenes/food-settings';
import { foodTypeSettingsScene, setGlobalDatabaseForFoodTypeSettings } from './scenes/food-type-settings';
import { foodAmountSettingsScene, setGlobalDatabaseForFoodAmountSettings } from './scenes/food-amount-settings';
import { feedingDetailsScene, setGlobalDatabaseForFeedingDetails } from './scenes/feeding-details';
import { notificationSettingsScene, setGlobalDatabaseForNotificationSettings } from './scenes/notification-settings';
import { fullHistoryScene } from './scenes/full-history';
import { exportScene } from './scenes/export';
import { scheduleFeedingScene, setGlobalSchedulerForScheduleFeeding, setGlobalDatabaseForScheduleFeeding } from './scenes/schedule-feeding';
import { scheduledListScene, setGlobalSchedulerForScheduledList } from './scenes/scheduled-list';
import { SchedulerService } from './services/scheduler';
import { SCENES } from './utils/constants';
import { TimeParser } from './services/parser';

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
if (!BOT_TOKEN) {
  console.error('BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è webhook
const NODE_ENV = process.env.NODE_ENV || 'development';
// –í–†–ï–ú–ï–ù–ù–û: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å webhook
const FORCE_DEVELOPMENT = true;
const EFFECTIVE_NODE_ENV = FORCE_DEVELOPMENT ? 'development' : NODE_ENV;
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const PORT = parseInt(process.env.PORT || '3000');
const WEBHOOK_PATH = process.env.WEBHOOK_PATH || '/webhook';

console.log(`–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: ${EFFECTIVE_NODE_ENV} (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π: ${NODE_ENV})`);

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
const bot = new Telegraf<BotContext>(BOT_TOKEN);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const database = new DatabaseService();

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
const botState: BotState = {
  users: new Map(),
  feedings: [],
  nextFeedingId: 1,
  nextUserId: 1
};

// –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
const databaseBotState: DatabaseBotState = {
  database,
  defaultFeedingInterval: 210 // 3.5 —á–∞—Å–∞
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
const timerService = new TimerService(bot, database);
const schedulerService = new SchedulerService(database, timerService);
const mainHandler = new MainHandler(timerService, database);

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å—Ü–µ–Ω
setGlobalServices(timerService, database);
setGlobalServicesForInterval(timerService, database);
setGlobalDatabaseForMain(database);
setGlobalDatabaseForTodayHistory(database);
setGlobalDatabaseForFoodSettings(database);
setGlobalDatabaseForFoodTypeSettings(database);
setGlobalDatabaseForFoodAmountSettings(database);
setGlobalDatabaseForFeedingDetails(database);
setGlobalDatabaseForNotificationSettings(database);
setGlobalSchedulerForScheduleFeeding(schedulerService);
setGlobalDatabaseForScheduleFeeding(database);
setGlobalSchedulerForScheduledList(schedulerService);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω
const stage = new Scenes.Stage<BotContext>([
  mainScene,
  feedingSuccessScene,
  feedingDetailsScene,
  settingsScene,
  historyScene,
  intervalSettingsScene,
  todayHistoryScene,
  foodSettingsScene,
  foodTypeSettingsScene,
  foodAmountSettingsScene,
  notificationSettingsScene,
  fullHistoryScene,
  exportScene,
  scheduleFeedingScene,
  scheduledListScene
]);

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
bot.command('notifications', async (ctx) => {
  try {
    const notificationService = timerService.getNotificationService();
    const stats = await notificationService.getNotificationStats();
    
    let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n\n` +
      `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}\n\n`;
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    message += `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: ${stats.enabledUsers}\n`;
    if (stats.enabledUsersList.length > 0) {
      message += stats.enabledUsersList.map(name => `  ‚Ä¢ ${name}`).join('\n') + '\n';
    }
    message += '\n';
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    message += `üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã: ${stats.disabledUsers}\n`;
    if (stats.disabledUsersList.length > 0) {
      message += stats.disabledUsersList.map(name => `  ‚Ä¢ ${name}`).join('\n');
    }
    
    await ctx.reply(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
bot.command('scheduler', async (ctx) => {
  try {
    const stats = await schedulerService.getSchedulerStats();
    
    let message = `üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:\n\n` +
      `üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π: ${stats.activeSchedules}\n` +
      `üìà –í—Å–µ–≥–æ –∫–æ—Ä–º–ª–µ–Ω–∏–π: ${stats.totalSchedules}\n` +
      `‚è±Ô∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤: ${stats.runningTimers}\n\n`;
    
    if (stats.nextSchedule) {
      message += `‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ:\n`;
      message += `  üìÖ ${stats.nextSchedule.scheduledTime.toLocaleString('ru-RU')}\n`;
      message += `  üÜî ID: ${stats.nextSchedule.id}\n`;
      
      const user = await database.getUserById(stats.nextSchedule.createdBy);
      message += `  üë§ –°–æ–∑–¥–∞–ª: ${user?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
    } else {
      message += `‚è∞ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏–π`;
    }
    
    await ctx.reply(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞');
  }
});

// Middleware –¥–ª—è —Å–µ—Å—Å–∏–π –∏ —Å—Ü–µ–Ω
bot.use(session());

// Middleware –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ database –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
bot.use((ctx, next) => {
  ctx.database = database;
  return next();
});

bot.use(stage.middleware());

// –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å—Ü–µ–Ω—ã (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ü–û–°–õ–ï middleware)
// –ö–æ–º–∞–Ω–¥–∞ /start - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ü–µ–Ω–µ
bot.start(async (ctx) => {
  try {
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    let dbUser = await database.getUserByTelegramId(ctx.from.id);
    if (!dbUser) {
      dbUser = await database.createUser(
        ctx.from.id,
        ctx.from.username || ctx.from.first_name
      );
      console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –ë–î: ${dbUser.username || dbUser.telegramId}`);
    }
    
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${dbUser.username || dbUser.telegramId} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞`);
    ctx.scene.enter(SCENES.MAIN);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î)
bot.command('status', async (ctx) => {
  try {
    const nextFeeding = timerService.getNextFeedingInfo();
    const lastFeeding = await database.getLastFeeding();
    const nextScheduled = await schedulerService.getNextScheduledFeeding();
    
    let message = 'üìä –°—Ç–∞—Ç—É—Å –∫–æ—Ä–º–ª–µ–Ω–∏—è:\n\n';
    
    if (lastFeeding) {
      const lastUser = await database.getUserByTelegramId(ctx.from?.id || 0);
      message += `üçΩÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ:\n`;
      message += `   –í—Ä–µ–º—è: ${lastFeeding.timestamp.toLocaleString('ru-RU')}\n`;
      message += `   –ö—Ç–æ: ${lastUser?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n`;
    } else {
      message += `üçΩÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏–π –µ—â–µ –Ω–µ –±—ã–ª–æ\n\n`;
    }
    
    message += `‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ—Ä–º–ª–µ–Ω–∏—è: ${TimeParser.formatInterval(nextFeeding.intervalMinutes)}\n\n`;
    
    if (nextFeeding.isActive && nextFeeding.time) {
      message += `‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ: ${nextFeeding.time.toLocaleString('ru-RU')}\n`;
    } else {
      message += '‚èπÔ∏è –ö–æ—Ä–º–ª–µ–Ω–∏—è –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n';
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–ª–µ–Ω–∏—è—Ö
    if (nextScheduled) {
      message += `\nüìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ—Ä–º–ª–µ–Ω–∏–µ:\n`;
      message += `   –í—Ä–µ–º—è: ${nextScheduled.scheduledTime.toLocaleString('ru-RU')}\n`;
      message += `   ID: ${nextScheduled.id}\n`;
      
      const scheduleUser = await database.getUserById(nextScheduled.createdBy);
      message += `   –°–æ–∑–¥–∞–ª: ${scheduleUser?.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –ë–î
    const stats = await database.getStats();
    message += `\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n`;
    message += `‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ${stats.todayFeedings} –∫–æ—Ä–º–ª–µ–Ω–∏–π\n`;
    message += `‚Ä¢ –í—Å–µ–≥–æ: ${stats.totalFeedings} –∫–æ—Ä–º–ª–µ–Ω–∏–π`;
    
    ctx.reply(message);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /status:', error);
    ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
bot.command('home', (ctx) => {
  ctx.scene.enter(SCENES.MAIN);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start');
});

// Graceful shutdown
process.once('SIGINT', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  timerService.stopAllTimers();
  schedulerService.cleanup();
  await database.close();
  bot.stop('SIGINT');
});

process.once('SIGTERM', async () => {
  console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
  timerService.stopAllTimers();
  schedulerService.cleanup();
  await database.close();
  bot.stop('SIGTERM');
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async function startBot() {
  try {
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    await database.initialize();
    
    console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...');
    await schedulerService.initialize();
    
    console.log('–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...');
    
    // –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if (EFFECTIVE_NODE_ENV === 'production') {
      // –†–µ–∂–∏–º webhook –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
      if (!WEBHOOK_URL) {
        throw new Error('WEBHOOK_URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞');
      }
      
      console.log(`–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook:`);
      console.log(`  URL: ${WEBHOOK_URL}${WEBHOOK_PATH}`);
      console.log(`  Port: ${PORT}`);
      
      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
      await bot.telegram.setWebhook(`${WEBHOOK_URL}${WEBHOOK_PATH}`);
      
      // –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ webhook
      await bot.launch({
        webhook: {
          domain: WEBHOOK_URL,
          path: WEBHOOK_PATH,
          port: PORT
        }
      });
      
      console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ webhook!');
    } else {
      // –†–µ–∂–∏–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      console.log('–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)...');
      
      // –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
      await bot.telegram.deleteWebhook();
      
      // –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling
      await bot.launch();
      
      console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling!');
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
    process.exit(1);
  }
}

startBot();
